import os
import platform
import subprocess

# 📢 ¡Derechos Reservados ART (Argentina Red Team)! 📢 
# Solo para uso responsable en entornos controlados, ¡eh!

def enumerate_system():
    """
    ¡Che, vamos a ver qué onda con este sistema! 🕵️‍♂️
    """
    print("Enumerando información del sistema...\n")
    try:
        uname = subprocess.check_output("uname -a", shell=True).decode().strip()
        print(f"Sistema operativo y kernel:\n{uname}\n")
    except Exception as e:
        print(f"¡Uy, no pude sacar la info del sistema! Error: {e}\n")

    try:
        if platform.system().lower() == 'linux':
            users = subprocess.check_output("cat /etc/passwd", shell=True).decode().strip()
            groups = subprocess.check_output("cat /etc/group", shell=True).decode().strip()
            print(f"Usuarios:\n{users}\n")
            print(f"Grupos:\n{groups}\n")
    except Exception as e:
        print(f"¡No pude listar usuarios ni grupos! Error: {e}\n")

def check_windows_privileges():
    """
    ¡A ver si somos admin o qué onda en Windows! 👮‍♂️
    """
    print("Verificando privilegios de usuario en Windows...\n")
    try:
        whoami_priv = subprocess.check_output("whoami /priv", shell=True).decode().strip()
        print(f"Privilegios de usuario:\n{whoami_priv}\n")
    except Exception as e:
        print(f"Error al verificar privilegios de usuario: {e}\n")

    print("Buscando servicios mal configurados... 👀\n")
    try:
        services = subprocess.check_output("wmic service get name,startmode,state", shell=True).decode().strip()
        print(f"Servicios:\n{services}\n")
    except Exception as e:
        print(f"Error al listar servicios: {e}\n")

    print("Buscando binarios vulnerables... 🔍\n")
    # (Acá podrías agregar la lógica para buscar binarios vulnerables)
    # Ejemplo (requiere AccessChk de Sysinternals):
    # vulnerable_bins = subprocess.check_output("accesschk.exe -uwcqv \"*\" /accepteula", shell=True).decode().strip()
    # print(f"Binarios vulnerables:\n{vulnerable_bins}\n")

def check_linux_privileges():
    """
    ¡Veamos qué podemos hacer con sudo en Linux! 🥷
    """
    print("Verificando configuraciones de sudo...\n")
    try:
        sudoers = subprocess.check_output("sudo -l", shell=True).decode().strip()
        print(f"Configuraciones de sudo:\n{sudoers}\n")
    except Exception as e:
        print(f"Error al verificar configuraciones de sudo: {e}\n")

    print("Buscando permisos inseguros en archivos y directorios... 🧐\n")
    try:
        writable_files = subprocess.check_output("find / -perm -2 -type f 2>/dev/null", shell=True).decode().strip()
        writable_dirs = subprocess.check_output("find / -perm -2 -type d 2>/dev/null", shell=True).decode().strip()
        print(f"Archivos con permisos de escritura para otros:\n{writable_files}\n")
        print(f"Directorios con permisos de escritura para otros:\n{writable_dirs}\n")
    except Exception as e:
        print(f"Error al verificar permisos: {e}\n")

    print("Buscando cron jobs y servicios raros... 🤔\n")
    try:
        cron_jobs = subprocess.check_output("ls -al /etc/cron* /var/spool/cron/crontabs/*", shell=True).decode().strip()
        print(f"Cron jobs:\n{cron_jobs}\n")
        services = subprocess.check_output("systemctl list-unit-files --type=service", shell=True).decode().strip()
        print(f"Servicios:\n{services}\n")
    except Exception as e:
        print(f"Error al enumerar tareas programadas y servicios: {e}\n")

def main():
    """
    ¡Arrancamos! Detectamos el sistema y hacemos las verificaciones.
    """
    system = platform.system().lower()
    if 'windows' in system:
        enumerate_system()
        check_windows_privileges()
    elif 'linux' in system:
        enumerate_system()
        check_linux_privileges()
    else:
        print(f"Sistema operativo no soportado: {system} 😔")

if __name__ == "__main__":
    main()
